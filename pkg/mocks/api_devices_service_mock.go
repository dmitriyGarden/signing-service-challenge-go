// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiskaly/coding-challenges/signing-service-challenge/api/v0/devices (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fiskaly/coding-challenges/signing-service-challenge/domain"
	devices "github.com/fiskaly/coding-challenges/signing-service-challenge/internal/devices"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDevicesService is a mock of Service interface.
type MockDevicesService struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesServiceMockRecorder
}

// MockDevicesServiceMockRecorder is the mock recorder for MockDevicesService.
type MockDevicesServiceMockRecorder struct {
	mock *MockDevicesService
}

// NewMockDevicesService creates a new mock instance.
func NewMockDevicesService(ctrl *gomock.Controller) *MockDevicesService {
	mock := &MockDevicesService{ctrl: ctrl}
	mock.recorder = &MockDevicesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicesService) EXPECT() *MockDevicesServiceMockRecorder {
	return m.recorder
}

// CreateDevice mocks base method.
func (m *MockDevicesService) CreateDevice(arg0 context.Context, arg1 devices.CreateDeviceInput) (*devices.CreateDeviceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(*devices.CreateDeviceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockDevicesServiceMockRecorder) CreateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockDevicesService)(nil).CreateDevice), arg0, arg1)
}

// DeleteDevice mocks base method.
func (m *MockDevicesService) DeleteDevice(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockDevicesServiceMockRecorder) DeleteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockDevicesService)(nil).DeleteDevice), arg0, arg1)
}

// GetCounters mocks base method.
func (m *MockDevicesService) GetCounters(arg0 context.Context, arg1 []uuid.UUID) (map[uuid.UUID]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters", arg0, arg1)
	ret0, _ := ret[0].(map[uuid.UUID]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockDevicesServiceMockRecorder) GetCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockDevicesService)(nil).GetCounters), arg0, arg1)
}

// GetDevice mocks base method.
func (m *MockDevicesService) GetDevice(arg0 context.Context, arg1 uuid.UUID) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDevicesServiceMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDevicesService)(nil).GetDevice), arg0, arg1)
}

// GetSignature mocks base method.
func (m *MockDevicesService) GetSignature(arg0 context.Context, arg1 uuid.UUID, arg2 uint64) (devices.SignatureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature", arg0, arg1, arg2)
	ret0, _ := ret[0].(devices.SignatureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignature indicates an expected call of GetSignature.
func (mr *MockDevicesServiceMockRecorder) GetSignature(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockDevicesService)(nil).GetSignature), arg0, arg1, arg2)
}

// ListDevices mocks base method.
func (m *MockDevicesService) ListDevices(arg0 context.Context) ([]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", arg0)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockDevicesServiceMockRecorder) ListDevices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockDevicesService)(nil).ListDevices), arg0)
}

// ListSignatures mocks base method.
func (m *MockDevicesService) ListSignatures(arg0 context.Context, arg1 uuid.UUID) ([]devices.SignatureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignatures", arg0, arg1)
	ret0, _ := ret[0].([]devices.SignatureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignatures indicates an expected call of ListSignatures.
func (mr *MockDevicesServiceMockRecorder) ListSignatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignatures", reflect.TypeOf((*MockDevicesService)(nil).ListSignatures), arg0, arg1)
}

// SignTransaction mocks base method.
func (m *MockDevicesService) SignTransaction(arg0 context.Context, arg1 devices.SignTransactionInput) (*devices.SignatureResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTransaction", arg0, arg1)
	ret0, _ := ret[0].(*devices.SignatureResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction.
func (mr *MockDevicesServiceMockRecorder) SignTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockDevicesService)(nil).SignTransaction), arg0, arg1)
}

// UpdateDeviceLabel mocks base method.
func (m *MockDevicesService) UpdateDeviceLabel(arg0 context.Context, arg1 uuid.UUID, arg2 string) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceLabel", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeviceLabel indicates an expected call of UpdateDeviceLabel.
func (mr *MockDevicesServiceMockRecorder) UpdateDeviceLabel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceLabel", reflect.TypeOf((*MockDevicesService)(nil).UpdateDeviceLabel), arg0, arg1, arg2)
}
