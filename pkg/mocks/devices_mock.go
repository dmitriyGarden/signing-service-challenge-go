// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fiskaly/coding-challenges/signing-service-challenge/internal/devices (interfaces: Repository,KeyStore,KeyGenerator,SignerFactory,Signer,SignatureStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/fiskaly/coding-challenges/signing-service-challenge/domain"
	devices "github.com/fiskaly/coding-challenges/signing-service-challenge/internal/devices"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRepository) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRepository) Get(arg0 context.Context, arg1 uuid.UUID) (domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockRepository) List(arg0 context.Context) ([]domain.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]domain.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), arg0)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 context.Context, arg1 domain.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0, arg1)
}

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyStore) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyStore)(nil).Delete), arg0, arg1)
}

// Load mocks base method.
func (m *MockKeyStore) Load(arg0 context.Context, arg1 uuid.UUID) (domain.KeyMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1)
	ret0, _ := ret[0].(domain.KeyMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockKeyStoreMockRecorder) Load(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockKeyStore)(nil).Load), arg0, arg1)
}

// Store mocks base method.
func (m *MockKeyStore) Store(arg0 context.Context, arg1 uuid.UUID, arg2 domain.KeyMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockKeyStoreMockRecorder) Store(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKeyStore)(nil).Store), arg0, arg1, arg2)
}

// MockKeyGenerator is a mock of KeyGenerator interface.
type MockKeyGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGeneratorMockRecorder
}

// MockKeyGeneratorMockRecorder is the mock recorder for MockKeyGenerator.
type MockKeyGeneratorMockRecorder struct {
	mock *MockKeyGenerator
}

// NewMockKeyGenerator creates a new mock instance.
func NewMockKeyGenerator(ctrl *gomock.Controller) *MockKeyGenerator {
	mock := &MockKeyGenerator{ctrl: ctrl}
	mock.recorder = &MockKeyGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGenerator) EXPECT() *MockKeyGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockKeyGenerator) Generate(arg0 domain.Algorithm) (domain.KeyMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", arg0)
	ret0, _ := ret[0].(domain.KeyMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockKeyGeneratorMockRecorder) Generate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockKeyGenerator)(nil).Generate), arg0)
}

// MockSignerFactory is a mock of SignerFactory interface.
type MockSignerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSignerFactoryMockRecorder
}

// MockSignerFactoryMockRecorder is the mock recorder for MockSignerFactory.
type MockSignerFactoryMockRecorder struct {
	mock *MockSignerFactory
}

// NewMockSignerFactory creates a new mock instance.
func NewMockSignerFactory(ctrl *gomock.Controller) *MockSignerFactory {
	mock := &MockSignerFactory{ctrl: ctrl}
	mock.recorder = &MockSignerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerFactory) EXPECT() *MockSignerFactoryMockRecorder {
	return m.recorder
}

// SignerFor mocks base method.
func (m *MockSignerFactory) SignerFor(arg0 domain.Device, arg1 domain.KeyMaterial) (devices.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignerFor", arg0, arg1)
	ret0, _ := ret[0].(devices.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignerFor indicates an expected call of SignerFor.
func (mr *MockSignerFactoryMockRecorder) SignerFor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignerFor", reflect.TypeOf((*MockSignerFactory)(nil).SignerFor), arg0, arg1)
}

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSigner) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigner)(nil).Sign), arg0)
}

// MockSignatureStore is a mock of SignatureStore interface.
type MockSignatureStore struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureStoreMockRecorder
}

// MockSignatureStoreMockRecorder is the mock recorder for MockSignatureStore.
type MockSignatureStoreMockRecorder struct {
	mock *MockSignatureStore
}

// NewMockSignatureStore creates a new mock instance.
func NewMockSignatureStore(ctrl *gomock.Controller) *MockSignatureStore {
	mock := &MockSignatureStore{ctrl: ctrl}
	mock.recorder = &MockSignatureStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureStore) EXPECT() *MockSignatureStoreMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockSignatureStore) Append(arg0 context.Context, arg1 uuid.UUID, arg2 devices.SignatureRecord) (devices.SignatureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0, arg1, arg2)
	ret0, _ := ret[0].(devices.SignatureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockSignatureStoreMockRecorder) Append(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockSignatureStore)(nil).Append), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockSignatureStore) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSignatureStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSignatureStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockSignatureStore) Get(arg0 context.Context, arg1 uuid.UUID, arg2 uint64) (devices.SignatureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(devices.SignatureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSignatureStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSignatureStore)(nil).Get), arg0, arg1, arg2)
}

// GetCounters mocks base method.
func (m *MockSignatureStore) GetCounters(arg0 context.Context, arg1 []uuid.UUID) (map[uuid.UUID]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounters", arg0, arg1)
	ret0, _ := ret[0].(map[uuid.UUID]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounters indicates an expected call of GetCounters.
func (mr *MockSignatureStoreMockRecorder) GetCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounters", reflect.TypeOf((*MockSignatureStore)(nil).GetCounters), arg0, arg1)
}

// Last mocks base method.
func (m *MockSignatureStore) Last(arg0 context.Context, arg1 uuid.UUID) (devices.SignatureRecord, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", arg0, arg1)
	ret0, _ := ret[0].(devices.SignatureRecord)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Last indicates an expected call of Last.
func (mr *MockSignatureStoreMockRecorder) Last(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockSignatureStore)(nil).Last), arg0, arg1)
}

// List mocks base method.
func (m *MockSignatureStore) List(arg0 context.Context, arg1 uuid.UUID) ([]devices.SignatureRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]devices.SignatureRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSignatureStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSignatureStore)(nil).List), arg0, arg1)
}
